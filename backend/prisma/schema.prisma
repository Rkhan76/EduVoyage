generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Use your database provider here
  url      = env("DATABASE_URL")
}


enum UserRole {
  STUDENT
  TEACHER
  BOTH
}




model User {
  id        String     @id @default(uuid())
  fullname  String
  username  String     @unique @db.VarChar(50)
  password  String
  roles     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  courses   Course[]   @relation("CourseCreator")
  enrollments Enrollment[]
  reviews   Review[]
}

model Course {
  id             String     @id @default(uuid())
  title          String
  description    String
  domainName     String
  subdomainName  String[]
  price          Float
  creatorId      String
  creator        User       @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons        Lesson[]
  enrollments    Enrollment[]
  reviews        Review[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
}

model Lesson {
  id          String     @id @default(uuid())
  title       String
  content     String
  courseId    String
  videoUrl    String     // URL to the video file
  videoLength Int        // Length of the video in seconds
  videoFormat String     // Format of the video (e.g., mp4, avi)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  course      Course     @relation(fields: [courseId], references: [id])
}


model Enrollment {
  id        String     @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
}

model Review {
  id        String     @id @default(uuid())
  content   String
  rating    Int
  userId    String
  courseId  String
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
}

model Domain {
  id        String      @id @default(uuid())
  name      String      @unique
  subdomains Subdomain[] 
  courses    String[]
}

model Subdomain {
  id        String    @id @default(uuid())
  name      String    @unique
  domainId  String
  domain    Domain    @relation(fields: [domainId], references: [id])
  courses   String[]  
}

